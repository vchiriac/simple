/* Copyright 2015 Buy Way Services */
package be.buyway.bwcommonssimu.simulator;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import be.buyway.bwcommonssimu.util.Validate;

/**
 * Computes the monthly payment for a loan. The algorithm implemented in this class only takes into account the amount
 * of the loan, the number of terms, an annual percentage rate and a postponement.
 */
public class MonthlyPaymentCalculatorImpl implements MonthlyPaymentCalculator {

    private static final BigDecimal MONTHS_PER_YEAR = BigDecimal.valueOf(12);

    private static final BigDecimal PERCENT = BigDecimal.valueOf(0.01);

    private static final BigDecimal DEFAULT_FREQUENCY = BigDecimal.ONE;

    private static final int MAX_PRECISION = 100;

    private final BigDecimal amount;

    private final int numberOfTerms;

    private final BigDecimal percentageRate;

    private final int postponement;

    private MonthlyPaymentCalculatorImpl(final Builder builder) {
        this.amount = builder.amount;
        this.numberOfTerms = builder.numberOfTerms;
        this.percentageRate = builder.percentageRate;
        this.postponement = builder.postponement;
    }

    @Override
    public BigDecimal compute() {

        final BigDecimal rawMonthlyPayment;

        if (BigDecimal.ZERO.compareTo(this.percentageRate) == 0) {

            rawMonthlyPayment = this.amount.divide(BigDecimal.valueOf(this.numberOfTerms), MAX_PRECISION, RoundingMode.HALF_EVEN);

        } else {

            final BigDecimal a = this.percentageRate
                .multiply(DEFAULT_FREQUENCY)
                .divide(MONTHS_PER_YEAR.divide(PERCENT, MathContext.UNLIMITED), MAX_PRECISION, RoundingMode.HALF_EVEN);
            final BigDecimal b = a.add(BigDecimal.ONE);
            final BigDecimal c = b.pow(
                BigDecimal.valueOf(this.numberOfTerms)
                    .divide(DEFAULT_FREQUENCY, MAX_PRECISION, RoundingMode.HALF_EVEN)
                    .intValue());
            final BigDecimal d = BigDecimal.ONE.subtract(BigDecimal.ONE.divide(c, MAX_PRECISION, RoundingMode.HALF_EVEN));
            final BigDecimal e = a.divide(d, MAX_PRECISION, RoundingMode.HALF_EVEN);
            final BigDecimal f = b.pow(this.postponement);

            rawMonthlyPayment = this.amount.multiply(f).multiply(e);
        }

        return rawMonthlyPayment.setScale(2, RoundingMode.HALF_EVEN);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private BigDecimal amount;

        private int numberOfTerms;

        private BigDecimal percentageRate;

        private int postponement;

        public Builder amount(final double amount) {
            Validate.isTrue(amount >= 0);

            this.amount = BigDecimal.valueOf(amount).setScale(3, RoundingMode.HALF_UP);
            return this;
        }

        public Builder numberOfTerms(final int numberOfTerms) {
            Validate.isTrue(numberOfTerms >= 0);

            this.numberOfTerms = numberOfTerms;
            return this;
        }

        public Builder percentageRate(final double apr) {
            Validate.isTrue(apr >= 0);

            this.percentageRate = BigDecimal.valueOf(apr).setScale(4, RoundingMode.HALF_UP);
            return this;
        }

        public Builder postponement(final int postponement) {
            Validate.isTrue(postponement >= 0);

            this.postponement = postponement;
            return this;
        }

        public MonthlyPaymentCalculatorImpl build() {
            return new MonthlyPaymentCalculatorImpl(this);
        }
    }

}
